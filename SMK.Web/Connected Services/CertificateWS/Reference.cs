//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Extensions.Configuration;
using System.Security.Policy;

namespace CertificateWS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CertificateWS.CertificateWSSoap")]
    public interface CertificateWSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCertificate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CertificateWS.GetCertificateResponse> GetCertificateAsync(CertificateWS.GetCertificateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllCertificate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CertificateWS.GetAllCertificateResponse> GetAllCertificateAsync(CertificateWS.GetAllCertificateRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Authentication2
    {
        
        private string tokenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token
        {
            get
            {
                return this.tokenField;
            }
            set
            {
                this.tokenField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCertificate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCertificateRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CertificateWS.Authentication2 Authentication2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string PersonID;
        
        public GetCertificateRequest()
        {
        }
        
        public GetCertificateRequest(CertificateWS.Authentication2 Authentication2, string PersonID)
        {
            this.Authentication2 = Authentication2;
            this.PersonID = PersonID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCertificateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCertificateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string GetCertificateResult;
        
        public GetCertificateResponse()
        {
        }
        
        public GetCertificateResponse(string GetCertificateResult)
        {
            this.GetCertificateResult = GetCertificateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllCertificate", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllCertificateRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public CertificateWS.Authentication2 Authentication2;
        
        public GetAllCertificateRequest()
        {
        }
        
        public GetAllCertificateRequest(CertificateWS.Authentication2 Authentication2)
        {
            this.Authentication2 = Authentication2;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllCertificateResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllCertificateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string GetAllCertificateResult;
        
        public GetAllCertificateResponse()
        {
        }
        
        public GetAllCertificateResponse(string GetAllCertificateResult)
        {
            this.GetAllCertificateResult = GetAllCertificateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CertificateWSSoapChannel : CertificateWS.CertificateWSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CertificateWSSoapClient : System.ServiceModel.ClientBase<CertificateWS.CertificateWSSoap>, CertificateWS.CertificateWSSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CertificateWSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CertificateWSSoapClient.GetBindingForEndpoint(endpointConfiguration), CertificateWSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateWSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CertificateWSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateWSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CertificateWSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CertificateWSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CertificateWS.GetCertificateResponse> CertificateWS.CertificateWSSoap.GetCertificateAsync(CertificateWS.GetCertificateRequest request)
        {
            return base.Channel.GetCertificateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CertificateWS.GetCertificateResponse> GetCertificateAsync(CertificateWS.Authentication2 Authentication2, string PersonID)
        {
            CertificateWS.GetCertificateRequest inValue = new CertificateWS.GetCertificateRequest();
            inValue.Authentication2 = Authentication2;
            inValue.PersonID = PersonID;
            return ((CertificateWS.CertificateWSSoap)(this)).GetCertificateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CertificateWS.GetAllCertificateResponse> CertificateWS.CertificateWSSoap.GetAllCertificateAsync(CertificateWS.GetAllCertificateRequest request)
        {
            return base.Channel.GetAllCertificateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CertificateWS.GetAllCertificateResponse> GetAllCertificateAsync(CertificateWS.Authentication2 Authentication2)
        {
            CertificateWS.GetAllCertificateRequest inValue = new CertificateWS.GetAllCertificateRequest();
            inValue.Authentication2 = Authentication2;
            return ((CertificateWS.CertificateWSSoap)(this)).GetAllCertificateAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CertificateWSSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CertificateWSSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            var GetendpointAddress = new Certificatefsa(new ConfigurationBuilder().AddJsonFile("appsettings.json").Build()).GetendpointAddress();
            if ((endpointConfiguration == EndpointConfiguration.CertificateWSSoap))
            {
                return new System.ServiceModel.EndpointAddress(GetendpointAddress);
            }
            if ((endpointConfiguration == EndpointConfiguration.CertificateWSSoap12))
            {
                return new System.ServiceModel.EndpointAddress(GetendpointAddress);
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CertificateWSSoap,
            
            CertificateWSSoap12,
        }

        public class Certificatefsa
        {
            protected readonly IConfiguration configuration;
            public Certificatefsa(IConfiguration configuration)
            {
                this.configuration = configuration;
            }
            public string GetendpointAddress()
            {
                var QuickSmokingUrl = configuration["QuickSmokingUrl"];
                return QuickSmokingUrl;
            }
        }
    }
}
